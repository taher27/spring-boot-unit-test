/*
Test generated by RoostGPT for test JavaTest1601 using AI Type Open AI and AI Model gpt-3.5-turbo-0301

1. Verify that the status is set correctly when a valid integer value is passed as an argument.
2. Verify that the status remains unchanged when an invalid integer value is passed as an argument.
3. Verify that the status can be set to the maximum allowed integer value.
4. Verify that the status can be set to the minimum allowed integer value.
5. Verify that the method does not throw any exception when called with a valid integer value.
6. Verify that the method throws an exception when called with an invalid integer value.
7. Verify that the method returns void and does not return any value.
8. Verify that the status value is persisted and can be retrieved correctly after setting it using this method.
9. Verify that the method can be called multiple times to change the status value and the latest value is persisted.
10. Verify that the method works correctly in a multi-threaded environment.
*/
package com.example.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class Response_setStatus_77df0e6923_Test {

    private static final int VALID_STATUS = 200;
    private static final int INVALID_STATUS = -1;
    private static final int MAX_STATUS = Integer.MAX_VALUE;
    private static final int MIN_STATUS = Integer.MIN_VALUE;

    private EntityManagerFactory entityManagerFactory;
    private EntityManager entityManager;

    @Before
    public void setUp() {
        entityManagerFactory = Persistence.createEntityManagerFactory("test-pu");
        entityManager = entityManagerFactory.createEntityManager();
    }

    @After
    public void tearDown() {
        entityManager.close();
        entityManagerFactory.close();
    }

    @Test
    public void testSetStatus_ValidStatus_StatusSet() {
        Response response = new Response();
        response.setStatus(VALID_STATUS);
        assertEquals(VALID_STATUS, response.getStatus());
    }

    @Test
    public void testSetStatus_InvalidStatus_StatusUnchanged() {
        Response response = new Response();
        response.setStatus(VALID_STATUS);
        response.setStatus(INVALID_STATUS);
        assertEquals(VALID_STATUS, response.getStatus());
    }

    @Test
    public void testSetStatus_MaxStatus_StatusSet() {
        Response response = new Response();
        response.setStatus(MAX_STATUS);
        assertEquals(MAX_STATUS, response.getStatus());
    }

    @Test
    public void testSetStatus_MinStatus_StatusSet() {
        Response response = new Response();
        response.setStatus(MIN_STATUS);
        assertEquals(MIN_STATUS, response.getStatus());
    }

    @Test
    public void testSetStatus_ValidStatus_NoExceptionThrown() {
        Response response = new Response();
        response.setStatus(VALID_STATUS);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testSetStatus_InvalidStatus_ExceptionThrown() {
        Response response = new Response();
        response.setStatus(INVALID_STATUS);
    }

    @Test
    public void testSetStatus_ReturnType_Void() {
        Response response = new Response();
        assertNull(response.setStatus(VALID_STATUS));
    }

    @Test
    public void testSetStatus_StatusPersisted() {
        entityManager.getTransaction().begin();
        Response response = new Response();
        response.setStatus(VALID_STATUS);
        entityManager.persist(response);
        entityManager.getTransaction().commit();

        entityManager.clear();

        Response persistedResponse = entityManager.find(Response.class, response.getId());
        assertEquals(VALID_STATUS, persistedResponse.getStatus());
    }

    @Test
    public void testSetStatus_MultipleCalls_StatusLatestPersisted() {
        entityManager.getTransaction().begin();
        Response response = new Response();
        response.setStatus(VALID_STATUS);
        entityManager.persist(response);
        entityManager.getTransaction().commit();

        entityManager.clear();

        Response persistedResponse = entityManager.find(Response.class, response.getId());
        assertEquals(VALID_STATUS, persistedResponse.getStatus());

        entityManager.getTransaction().begin();
        persistedResponse.setStatus(INVALID_STATUS);
        entityManager.merge(persistedResponse);
        entityManager.getTransaction().commit();

        entityManager.clear();

        Response updatedPersistedResponse = entityManager.find(Response.class, persistedResponse.getId());
        assertEquals(INVALID_STATUS, updatedPersistedResponse.getStatus());
    }

    @Test
    public void testSetStatus_MultiThreaded() throws InterruptedException {
        Response response = new Response();

        Thread t1 = new Thread(() -> {
            response.setStatus(VALID_STATUS);
        });

        Thread t2 = new Thread(() -> {
            response.setStatus(INVALID_STATUS);
        });

        t1.start();
        t2.start();

        t1.join();
        t2.join();

        assertEquals(INVALID_STATUS, response.getStatus());
    }
}
