/*
Test generated by RoostGPT for test JavaTest1601 using AI Type Open AI and AI Model gpt-3.5-turbo-0301

Test Scenarios for the function getErrorCode:

1. Verify that the function returns the error code correctly when errorCode is set to a valid integer value.
2. Verify that the function returns the error code correctly when errorCode is set to a negative integer value.
3. Verify that the function returns the error code correctly when errorCode is set to zero.
4. Verify that the function returns the error code correctly when errorCode is set to the maximum integer value.
5. Verify that the function returns the error code correctly when errorCode is set to the minimum integer value.
6. Verify that the function returns an error code of zero when errorCode is not set or initialized.
7. Verify that the function returns an error code of zero when errorCode is set to a non-integer value.
8. Verify that the function returns the same error code value when called multiple times consecutively.
9. Verify that the function does not modify or change the value of errorCode when called.
10. Verify that the function returns the correct error code value in a multi-threaded environment.
*/
package com.example.exception;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class ErrorResponse_getErrorCode_1611122f8d_Test {

    private ErrorResponse errorResponse;

    @Before
    public void setUp() {
        errorResponse = new ErrorResponse();
    }

    @Test
    public void testGetErrorCode_validIntegerValue() {
        errorResponse.setErrorCode(200);
        Assert.assertEquals(200, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_negativeIntegerValue() {
        errorResponse.setErrorCode(-1);
        Assert.assertEquals(-1, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_zeroValue() {
        errorResponse.setErrorCode(0);
        Assert.assertEquals(0, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_maxIntegerValue() {
        int maxIntValue = Integer.MAX_VALUE;
        errorResponse.setErrorCode(maxIntValue);
        Assert.assertEquals(maxIntValue, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_minIntegerValue() {
        int minIntValue = Integer.MIN_VALUE;
        errorResponse.setErrorCode(minIntValue);
        Assert.assertEquals(minIntValue, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_notSetOrInitialized() {
        Assert.assertEquals(0, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_nonIntegerValue() {
        errorResponse.setErrorCode(10.5);
        Assert.assertEquals(0, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_multipleCalls() {
        errorResponse.setErrorCode(404);
        Assert.assertEquals(404, errorResponse.getErrorCode());
        Assert.assertEquals(404, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_noChange() {
        int errorCode = 400;
        errorResponse.setErrorCode(errorCode);
        errorResponse.getErrorCode();
        Assert.assertEquals(errorCode, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_multiThreaded() throws InterruptedException {
        Runnable r = () -> {
            errorResponse.setErrorCode(500);
            Assert.assertEquals(500, errorResponse.getErrorCode());
        };

        Thread t1 = new Thread(r);
        Thread t2 = new Thread(r);

        t1.start();
        t2.start();

        t1.join();
        t2.join();
    }
}
