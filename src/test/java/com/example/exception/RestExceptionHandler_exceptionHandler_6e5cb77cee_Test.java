/*
Test generated by RoostGPT for test JavaTest1601 using AI Type Open AI and AI Model gpt-3.5-turbo-0301

Test Scenarios for the function exceptionHandler:

1. Verify that when an Exception is thrown, the function returns a ResponseEntity object.
2. Verify that the returned ResponseEntity object has a status code of HttpStatus.BAD_REQUEST.
3. Verify that the returned ResponseEntity object has an ErrorResponse object with a non-null errorCode field.
4. Verify that the returned ResponseEntity object has an ErrorResponse object with a non-null message field.
5. Verify that the errorCode field in the ErrorResponse object matches the HttpStatus.BAD_REQUEST value.
6. Verify that the message field in the ErrorResponse object matches the expected error message.
*/
package com.example.exception;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@RunWith(MockitoJUnitRunner.class)
public class RestExceptionHandler_exceptionHandler_6e5cb77cee_Test {

    @InjectMocks
    private RestExceptionHandler restExceptionHandler;

    @Before
    public void init() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testExceptionHandlerReturnsResponseEntity() {
        Exception ex = new Exception("Test Exception");
        ResponseEntity<ErrorResponse> responseEntity = restExceptionHandler.exceptionHandler(ex);
        Assert.assertNotNull(responseEntity);
    }

    @Test
    public void testExceptionHandlerReturnsBadRequestStatus() {
        Exception ex = new Exception("Test Exception");
        ResponseEntity<ErrorResponse> responseEntity = restExceptionHandler.exceptionHandler(ex);
        Assert.assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
    }

    @Test
    public void testExceptionHandlerReturnsErrorResponseWithNonNullErrorCode() {
        Exception ex = new Exception("Test Exception");
        ResponseEntity<ErrorResponse> responseEntity = restExceptionHandler.exceptionHandler(ex);
        Assert.assertNotNull(responseEntity.getBody().getErrorCode());
    }

    @Test
    public void testExceptionHandlerReturnsErrorResponseWithNonNullMessage() {
        Exception ex = new Exception("Test Exception");
        ResponseEntity<ErrorResponse> responseEntity = restExceptionHandler.exceptionHandler(ex);
        Assert.assertNotNull(responseEntity.getBody().getMessage());
    }

    @Test
    public void testExceptionHandlerReturnsErrorResponseWithCorrectErrorCode() {
        Exception ex = new Exception("Test Exception");
        ResponseEntity<ErrorResponse> responseEntity = restExceptionHandler.exceptionHandler(ex);
        Assert.assertEquals(HttpStatus.BAD_REQUEST.value(), responseEntity.getBody().getErrorCode());
    }

    @Test
    public void testExceptionHandlerReturnsErrorResponseWithCorrectMessage() {
        Exception ex = new Exception("Test Exception");
        ResponseEntity<ErrorResponse> responseEntity = restExceptionHandler.exceptionHandler(ex);
        Assert.assertEquals("The request could not be understood by the server due to malformed syntax.", responseEntity.getBody().getMessage());
    }
}
